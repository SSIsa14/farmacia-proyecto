kind: pipeline
type: docker
name: default

# Contenedores donde correrán los steps
steps:

  # ===== Build Backend =====
  - name: build-backend
    image: maven:3.9.2-openjdk-18
    commands:
      - echo "==== [Build Backend] ===="
      - cd pharmacy || cd backend
      - mvn clean install

  # ===== Test Backend =====
  - name: test-backend
    image: maven:3.9.2-openjdk-18
    commands:
      - echo "==== [Test Backend] ===="
      - cd pharmacy || cd backend
      - mvn test

  # ===== SonarQube Backend =====
  - name: sonar-backend
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_HOST_URL: http://sonarqube:9000
      SONAR_TOKEN:
        from_secret: sonar_token
    commands:
      - echo "==== [SonarQube Backend] ===="
      - cd pharmacy || cd backend
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP_Backend \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

  # ===== Build Frontend =====
  - name: build-frontend
    image: node:18
    commands:
      - echo "==== [Build Frontend] ===="
      - cd frontend
      - npm install

  # ===== Test Frontend =====
  - name: test-frontend
    image: node:18
    commands:
      - echo "==== [Test Frontend] ===="
      - cd frontend
      - npm install
      - npx ng test --watch=false --code-coverage

  # ===== SonarQube Frontend =====
  - name: sonar-frontend
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_HOST_URL: http://sonarqube:9000
      SONAR_TOKEN:
        from_secret: sonar_token
    commands:
      - echo "==== [SonarQube Frontend] ===="
      - cd frontend
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP_Frontend \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.language=ts \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # ===== Deploy =====
  - name: deploy
    image: docker:24.0-dind
    privileged: true
    commands:
      - echo "==== [Deploy] ===="
      - export BRANCH_NAME=${DRONE_BRANCH}
      - |
        profile=""
        if [ "$BRANCH_NAME" = "main" ]; then profile="prod"
        elif [ "$BRANCH_NAME" = "development" ]; then profile="dev"
        elif [ "$BRANCH_NAME" = "qa" ]; then profile="qa"
        else echo "No hay configuración para esta rama"; exit 1
        fi
      - docker-compose -f docker-compose.comp.yml --profile $profile down || true
      - docker-compose -f docker-compose.comp.yml --profile $profile up -d --build
