ALTER SESSION SET CONTAINER = XEPDB1;

DECLARE
  v_open NUMBER;
BEGIN
  FOR i IN 1..60 LOOP  -- Wait up to 60 seconds
    SELECT COUNT(*) INTO v_open FROM v$pdbs WHERE name = 'XEPDB1' AND open_mode = 'READ WRITE';
    EXIT WHEN v_open = 1;
    DBMS_LOCK.SLEEP(1);  -- Wait 1 second
  END LOOP;
END;
/

DECLARE
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count FROM dba_users WHERE username = 'PHARMACY_LOCAL';
  IF v_count = 0 THEN
    EXECUTE IMMEDIATE 'CREATE USER PHARMACY_LOCAL IDENTIFIED BY devpass';
    EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO PHARMACY_LOCAL';
    EXECUTE IMMEDIATE 'ALTER USER PHARMACY_LOCAL QUOTA UNLIMITED ON USERS';
  END IF;
END;
/

ALTER SESSION SET CURRENT_SCHEMA = PHARMACY_LOCAL;

---------------------------------------------------------------------
-- 1. Table: Medicamento (Medicines)
---------------------------------------------------------------------
CREATE TABLE Medicamento (
    id_medicamento   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo           VARCHAR2(50) UNIQUE,
    nombre           VARCHAR2(100),
    categoria        VARCHAR2(100),
    principio_activo VARCHAR2(100),
    descripcion      VARCHAR2(500),
    foto_url         VARCHAR2(200),
    concentracion    VARCHAR2(50),
    presentacion     VARCHAR2(50),
    numero_unidades  NUMBER,
    marca            VARCHAR2(100),
    requiere_receta  CHAR(1) DEFAULT 'N',
    stock            NUMBER,
    precio           NUMBER(10, 2) DEFAULT 0
);

---------------------------------------------------------------------
-- 2. Table: Institucion (Institutions)
---------------------------------------------------------------------
CREATE TABLE Institucion (
    id_institucion      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_institucion  VARCHAR2(50) UNIQUE NOT NULL,
    nombre_institucion  VARCHAR2(100) NOT NULL,
    tipo_institucion    VARCHAR2(50) NOT NULL
);

---------------------------------------------------------------------
-- 3. Table: Usuario (Users)
-- Removed the "rol" attribute. Roles are now assigned via UsuarioRol.
---------------------------------------------------------------------
CREATE TABLE Usuario (
    id_usuario      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100) NOT NULL,
    correo          VARCHAR2(150) UNIQUE NOT NULL,
    password_hash   VARCHAR2(256) NOT NULL,
    activo          CHAR(1) DEFAULT 'Y',
    fecha_creacion  TIMESTAMP DEFAULT SYSTIMESTAMP
);

---------------------------------------------------------------------
-- 3a. Table: Rol (Role Types)
-- Centralized table of role types.
---------------------------------------------------------------------
CREATE TABLE Rol (
    id_rol      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_rol  VARCHAR2(50) UNIQUE NOT NULL  -- e.g., 'Administrador', 'Empleado', 'Paciente', etc.
);

---------------------------------------------------------------------
-- 3b. Table: UsuarioRol (User-Role Join)
-- Enables one-to-many relationships between users and roles.
---------------------------------------------------------------------
CREATE TABLE UsuarioRol (
    id_usuario  NUMBER NOT NULL,
    id_rol      NUMBER NOT NULL,
    CONSTRAINT pk_usuario_rol PRIMARY KEY (id_usuario, id_rol),
    CONSTRAINT fk_usuarioRol_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_usuarioRol_rol FOREIGN KEY (id_rol) REFERENCES Rol(id_rol)
);

---------------------------------------------------------------------
-- 4. Table: Receta (Prescription)
---------------------------------------------------------------------
CREATE TABLE Receta (
    id_receta      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_receta  VARCHAR2(50) UNIQUE,
    fecha          TIMESTAMP DEFAULT SYSTIMESTAMP,
    id_usuario     NUMBER,
    aprobado_seguro CHAR(1) DEFAULT 'N',
    pdf_url        VARCHAR2(200),
    CONSTRAINT fk_receta_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

---------------------------------------------------------------------
-- 5. Table: RecetaDetalle (Prescription Details)
---------------------------------------------------------------------
CREATE TABLE RecetaDetalle (
    id_detalle         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_receta          NUMBER NOT NULL,
    id_medicamento     NUMBER NOT NULL,
    dosis              VARCHAR2(50),
    frecuencia         VARCHAR2(50),
    duracion           VARCHAR2(50),
    cantidad_requerida NUMBER,
    observaciones      VARCHAR2(200),
    CONSTRAINT fk_recetaDetalle_receta FOREIGN KEY (id_receta) REFERENCES Receta(id_receta),
    CONSTRAINT fk_recetaDetalle_medicamento FOREIGN KEY (id_medicamento) REFERENCES Medicamento(id_medicamento)
);

---------------------------------------------------------------------
-- 6. Table: Venta (Sales)
---------------------------------------------------------------------
CREATE TABLE Venta (
    id_venta     NUMBER PRIMARY KEY,
    id_usuario   NUMBER NOT NULL,
    id_receta    NUMBER,
    fecha_venta  TIMESTAMP DEFAULT SYSTIMESTAMP,
    total        NUMBER(10,2),
    impuesto     NUMBER(10,2),
    descuento    NUMBER(10,2),
    monto_pagado NUMBER(10,2),
    CONSTRAINT fk_venta_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_venta_receta FOREIGN KEY (id_receta) REFERENCES Receta(id_receta)
);

-- Sequence for Venta
CREATE SEQUENCE SEQ_VENTA
  START WITH 1
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

-- Trigger for Venta
CREATE OR REPLACE TRIGGER TR_VENTA
BEFORE INSERT ON VENTA
FOR EACH ROW
BEGIN
  IF :NEW.ID_VENTA IS NULL THEN
    SELECT SEQ_VENTA.NEXTVAL INTO :NEW.ID_VENTA FROM DUAL;
  END IF;
END;
/

---------------------------------------------------------------------
-- 7. Table: VentaDetalle (Sale Details)
---------------------------------------------------------------------
CREATE TABLE VentaDetalle (
    id_venta_detalle  NUMBER PRIMARY KEY,
    id_venta          NUMBER NOT NULL,
    id_medicamento    NUMBER NOT NULL,
    cantidad          NUMBER,
    precio_unitario   NUMBER(10,2),
    total_linea       NUMBER(10,2),
    CONSTRAINT fk_ventaDetalle_venta FOREIGN KEY (id_venta) REFERENCES Venta(id_venta),
    CONSTRAINT fk_ventaDetalle_medicamento FOREIGN KEY (id_medicamento) REFERENCES Medicamento(id_medicamento)
);

-- Sequence for VentaDetalle
CREATE SEQUENCE SEQ_VENTA_DETALLE
  START WITH 1
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

-- Trigger for VentaDetalle
CREATE OR REPLACE TRIGGER TR_VENTA_DETALLE
BEFORE INSERT ON VENTADETALLE
FOR EACH ROW
BEGIN
  IF :NEW.ID_VENTA_DETALLE IS NULL THEN
    SELECT SEQ_VENTA_DETALLE.NEXTVAL INTO :NEW.ID_VENTA_DETALLE FROM DUAL;
  END IF;
END;
/

---------------------------------------------------------------------
-- 8. Table: Factura (Invoice)
---------------------------------------------------------------------
CREATE TABLE Factura (
    id_factura     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_venta       NUMBER NOT NULL,
    fecha_factura  TIMESTAMP DEFAULT SYSTIMESTAMP,
    total_factura  NUMBER(10,2),
    pdf_url        VARCHAR2(200),  -- URL or path to the PDF invoice
    CONSTRAINT fk_factura_venta FOREIGN KEY (id_venta) REFERENCES Venta(id_venta)
);

---------------------------------------------------------------------
-- 9. Table: ComentarioMedicamento (Medicine Comments)
---------------------------------------------------------------------
CREATE TABLE ComentarioMedicamento (
    id_comentario   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_medicamento  NUMBER NOT NULL,
    id_usuario      NUMBER,
    texto           VARCHAR2(500) NOT NULL,
    fecha           TIMESTAMP DEFAULT SYSTIMESTAMP,
    parent_id       NUMBER,
    CONSTRAINT fk_comentario_medicamento FOREIGN KEY (id_medicamento) REFERENCES Medicamento(id_medicamento),
    CONSTRAINT fk_comentario_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_comentario_parent FOREIGN KEY (parent_id) REFERENCES ComentarioMedicamento(id_comentario)
);

---------------------------------------------------------------------
-- 10. Table: AuditoriaFarmacia (Audit Log)
---------------------------------------------------------------------
CREATE TABLE AuditoriaFarmacia (
    id_auditoria   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabla_afectada VARCHAR2(100),
    tipo_cambio    VARCHAR2(10),
    descripcion    VARCHAR2(500),
    usuario        VARCHAR2(100),
    fecha          TIMESTAMP DEFAULT SYSTIMESTAMP
);

---------------------------------------------------------------------
-- 11. Table: Farmacia (Pharmacy Instances)
---------------------------------------------------------------------
CREATE TABLE Farmacia (
    id_farmacia      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codigo_farmacia  VARCHAR2(50) UNIQUE NOT NULL,
    nombre           VARCHAR2(100) NOT NULL,
    direccion        VARCHAR2(200),
    servidor_url     VARCHAR2(200),
    estado           CHAR(1) DEFAULT 'A',  -- 'A' for Active, 'I' for Inactive
    fecha_registro   TIMESTAMP DEFAULT SYSTIMESTAMP
);

---------------------------------------------------------------------
-- 12. Table: ConfiguracionInterconexion (Integration Configurations)
---------------------------------------------------------------------
CREATE TABLE ConfiguracionInterconexion (
    id_config         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_farmacia       NUMBER NOT NULL,
    tipo_sistema      VARCHAR2(50) NOT NULL,  -- e.g., 'Hospital', 'Seguro'
    codigo_sistema    VARCHAR2(50) NOT NULL,  -- System-specific code
    servidor_url      VARCHAR2(200) NOT NULL, -- URL or connection string for the system
    fecha_config      TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_config_farmacia FOREIGN KEY (id_farmacia) REFERENCES Farmacia(id_farmacia)
);
