kind: pipeline
type: docker
name: farmacia-ci

workspace:
  base: /drone
  path: src

clone:
  depth: 50

steps:
  - name: checkout
    image: alpine/git
    commands:
      - git fetch --all
      - git reset --hard origin/${DRONE_BRANCH}

  # ===== Backend =====
  - name: build-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    environment:
      MAVEN_OPTS: -Dmaven.test.skip=true
    commands:
      - cd pharmacy
      - mvn -q -B clean install -DskipTests

  - name: test-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    commands:
      - cd pharmacy
      - mvn -q -B test jacoco:report

  - name: sonar-backend
    image: maven:3.9.9-eclipse-temurin-17
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend
    when:
      branch:
        include: [ main, development, qa ]
      exists: [ pharmacy/pom.xml ]
    depends_on:
      - test-backend
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP_Backend_${DRONE_BRANCH} \
          -Dsonar.projectName=FP_Backend_${DRONE_BRANCH} \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ===== Frontend =====
  - name: build-frontend
    image: node:18
    when:
      exists: [ frontend/package.json ]
    commands:
      - cd frontend
      - npm ci
      - npm run build || true  # opcional

  - name: test-frontend
    image: buildkite/puppeteer:latest
    when:
      exists: [ frontend/package.json ]
    environment:
      CI: "true"
    commands:
      - cd frontend
      - npm ci
      - npm test -- --watch=false --browsers=ChromeHeadless --code-coverage --no-sandbox || npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

  - name: sonar-frontend
    image: sonarsource/sonar-scanner-cli:latest
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend
    when:
      branch:
        include: [ main, development, qa ]
      exists: [ frontend/package.json ]
    depends_on:
      - test-frontend
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info. Verifica tus tests/coverage"; ls -la coverage || true; exit 3; }
      - sonar-scanner \
          -Dsonar.projectKey=FP_Frontend_${DRONE_BRANCH} \
          -Dsonar.projectName=FP_Frontend_${DRONE_BRANCH} \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  - name: notify
    image: plugins/mail
    depends_on:
      - build-backend
      - test-backend
      - build-frontend
      - test-frontend
      - sonar-frontend
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: smtp_user
      password:
        from_secret: smtp_pass
      from: "Drone CI <sandovalisabela0524@gmail.com>"
      to:
        - jflores@unis.edu.gt
        - abrilsofia159@gmail.com
      subject: "Pipeline FP - ${DRONE_REPO} - ${DRONE_BUILD_STATUS}"
      body: |
        Proyecto: ${DRONE_REPO}
        Rama: ${DRONE_BRANCH}
        Build: ${DRONE_BUILD_NUMBER}
        Estado: ${DRONE_BUILD_STATUS}
      tls: true
