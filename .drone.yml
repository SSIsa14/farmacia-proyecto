kind: pipeline
type: docker
name: farmacia-ci

workspace:
  base: /drone
  path: src

clone:
  depth: 50

steps:
  - name: checkout
    image: alpine/git
    commands:
      - git fetch --all
      - git reset --hard origin/${DRONE_BRANCH}

  # ===== Backend (build → test) =====
  - name: build-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    environment:
      MAVEN_OPTS: -Dmaven.test.skip=true
    depends_on: [ checkout ]
    commands:
      - cd pharmacy
      - mvn -q -B clean install -DskipTests

  - name: test-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    depends_on: [ build-backend ]
    commands:
      - cd pharmacy
      - mvn -q -B test jacoco:report

  # === Esperar SonarQube (público: /api/system/status) ===
  - name: wait-for-sonar
    image: curlimages/curl:8.9.1
    depends_on: [ test-backend ]
    environment:
      SONAR_HOST_URL:
        from_secret: http://sonarqube:9000 
    commands:
      - |
        echo "Esperando $SONAR_HOST_URL ..."
        for i in $(seq 1 60); do
          if curl -fsS "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
            echo "SonarQube listo (status=UP)"; exit 0
          fi
          sleep 5
        done
        echo "Timeout esperando SonarQube (status!=UP)"; exit 8

  # ===== Sonar BACKEND por rama =====
  - name: sonar-backend-main
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ main ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_main
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_main"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Prod \
          -Dsonar.projectName=FP:Backend_Prod \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  - name: sonar-backend-development
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ development ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_development
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_development"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Development \
          -Dsonar.projectName=FP:Backend_Development \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  - name: sonar-backend-qa
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ qa ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_qa
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_qa"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Qa \
          -Dsonar.projectName=FP:Backend_Qa \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ===== Frontend (build → test) =====
  - name: build-frontend
    image: node:18
    when:
      exists: [ frontend/package.json ]
    depends_on:
      - sonar-backend-main
      - sonar-backend-development
      - sonar-backend-qa
    commands:
      - cd frontend
      - npm ci
      - npm run build || true

  - name: test-frontend
    image: buildkite/puppeteer:latest
    when:
      exists: [ frontend/package.json ]
    environment:
      CI: "true"
    depends_on: [ build-frontend ]
    commands:
      - cd frontend
      - npm ci
      - npm test -- --watch=false --browsers=ChromeHeadless --code-coverage --no-sandbox || npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

  # ===== Sonar FRONTEND por rama =====
  - name: sonar-frontend-main
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ main ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_main
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_main"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - sonar-scanner \
          -Dsonar.projectKey=FP_Frontend_main \
          -Dsonar.projectName=FP_Frontend_main \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  - name: sonar-frontend-development
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ development ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_development
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_development"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - sonar-scanner \
          -Dsonar.projectKey=FP_Frontend_development \
          -Dsonar.projectName=FP_Frontend_development \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  - name: sonar-frontend-qa
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ qa ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_qa
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_qa"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - sonar-scanner \
          -Dsonar.projectKey=FP_Frontend_qa \
          -Dsonar.projectName=FP_Frontend_qa \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # ===== Notificación =====
  - name: notify
    image: plugins/mail
    depends_on:
      - sonar-frontend-main
      - sonar-frontend-development
      - sonar-frontend-qa
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: smtp_user
      password:
        from_secret: smtp_pass
      from: "Drone CI <sandovalisabela0524@gmail.com>"
      to:
        - jflores@unis.edu.gt
        - abrilsofia159@gmail.com
      subject: "Pipeline FP - ${DRONE_REPO} - ${DRONE_BUILD_STATUS}"
      body: |
        Proyecto: ${DRONE_REPO}
        Rama: ${DRONE_BRANCH}
        Build: ${DRONE_BUILD_NUMBER}
        Estado: ${DRONE_BUILD_STATUS}
      tls: true
