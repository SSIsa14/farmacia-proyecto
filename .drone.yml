kind: pipeline
type: docker
name: farmacia-ci

workspace:
  base: /drone
  path: src

environment:
  SONAR_HOST_URL: http://sonarqube:9000

clone:
  depth: 50

trigger:
  event: [ push, pull_request ]
  branch: [ main, development, qa ]

concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

steps:
  - name: checkout
    image: alpine/git
    commands:
      - git fetch --all
      - git reset --hard origin/${DRONE_BRANCH}

  - name: pr-merge
    image: alpine/git
    when:
      event: [ pull_request ]
    depends_on: [ checkout ]
    commands:
      - |
        set -e
        git config user.email "ci@drone.local"
        git config user.name "Drone CI"
        echo "Base: ${DRONE_BRANCH} | Source: ${DRONE_SOURCE_BRANCH} | Target: ${DRONE_TARGET_BRANCH}"
        git fetch origin ${DRONE_SOURCE_BRANCH}:${DRONE_SOURCE_BRANCH}
        git merge --no-ff --no-commit ${DRONE_SOURCE_BRANCH} || { echo "Conflictos de merge"; git merge --abort; exit 1; }
        echo "Merge simulado OK para PR #${DRONE_PULL_REQUEST}"

  # ===== Backend (build → test) =====
  - name: status-build-backend-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ] }
    depends_on: [ checkout, pr-merge ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: build-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Compilando backend…"

  - name: build-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    environment:
      MAVEN_OPTS: -Dmaven.test.skip=true
    depends_on: [ status-build-backend-pending,  checkout, pr-merge  ]
    commands:
      - cd pharmacy
      - mvn -q -B clean install -DskipTests

  - name: status-build-backend-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] } }
    depends_on: [ build-backend ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: build-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Build backend OK"

  - name: status-build-backend-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] } }
    depends_on: [ build-backend ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: build-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Falló build backend"

  - name: status-test-backend-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ] }
    depends_on: [ build-backend ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: test-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Ejecutando pruebas backend…"

  - name: test-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    depends_on: [ status-test-backend-pending , build-backend]
    commands:
      - cd pharmacy
      - mvn -q -B test jacoco:report

  - name: status-test-backend-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] } }
    depends_on: [ test-backend ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: test-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Tests backend OK"

  - name: status-test-backend-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] } }
    depends_on: [ test-backend ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: test-backend
      target_url: ${DRONE_BUILD_LINK}
      description: "Fallaron tests backend"

  # === Esperar SonarQube arriba ===
  - name: wait-for-sonarqube
    image: curlimages/curl:8.9.1
    depends_on: [ test-backend ]
    commands:
      - |
        echo "Esperando $SONAR_HOST_URL ..."
        for i in $(seq 1 60); do
          if curl -fsS "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
            echo "SonarQube listo (status=UP)"; exit 0
          fi
          sleep 5
        done
        echo "Timeout esperando SonarQube (status!=UP)"; exit 8

  # ===== Sonar BACKEND por rama  =====
  - name: sonar-qgate-backend-main
    image: maven:3.9.9-eclipse-temurin-17
    when: { event: [ push ], branch: [ main ], exists: [ pharmacy/pom.xml ] }
    environment: { SONAR_TOKEN: { from_secret: sonar_token_backend_main } }
    depends_on: [ wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_main"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar -DskipTests \
          -Dsonar.projectKey=FP:Backend_Prod \
          -Dsonar.projectName=FP:Backend_Prod \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=600

  - name: sonar-qgate-backend-development
    image: maven:3.9.9-eclipse-temurin-17
    when: { event: [ push ], branch: [ development ], exists: [ pharmacy/pom.xml ] }
    environment: { SONAR_TOKEN: { from_secret: sonar_token_backend_development } }
    depends_on: [ wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_development"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar -DskipTests \
          -Dsonar.projectKey=FP:Backend_Development \
          -Dsonar.projectName=FP:Backend_Development \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=600

  - name: sonar-qgate-backend-qa
    image: maven:3.9.9-eclipse-temurin-17
    when: { event: [ push ], branch: [ qa ], exists: [ pharmacy/pom.xml ] }
    environment: { SONAR_TOKEN: { from_secret: sonar_token_backend_qa } }
    depends_on: [ wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_qa"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar -DskipTests \
          -Dsonar.projectKey=FP:Backend_Qa \
          -Dsonar.projectName=FP:Backend_Qa \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=600

  # ===== Sonar BACKEND PR + status "sonar-backend/analyze-qa" =====
  - name: status-sonar-backend-analyze-qa-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ] }
    depends_on: [ wait-for-sonarqube ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: sonar-backend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Analizando backend (PR) en SonarQube…"

  - name: sonar-qgate-backend-pr
    image: maven:3.9.9-eclipse-temurin-17
    when: { event: [ pull_request ] }
    environment: { SONAR_TOKEN: { from_secret: sonar-token } }
    depends_on: [ status-sonar-backend-analyze-qa-pending ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend (PR)"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar -DskipTests \
          -Dsonar.projectKey=FP:Backend_PR-${DRONE_PULL_REQUEST} \
          -Dsonar.projectName=FP:Backend_PR-${DRONE_PULL_REQUEST} \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=600


  - name: status-sonar-backend-analyze-qa-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] } }
    depends_on: [ sonar-qgate-backend-pr ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: sonar-backend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Análisis backend (PR) OK"

  - name: status-sonar-backend-analyze-qa-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] } }
    depends_on: [ sonar-qgate-backend-pr ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: sonar-backend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Falló análisis backend (PR)"

  # ===== Frontend (build/test) =====
  - name: status-build-frontend-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], exists: [ frontend/package.json ] }
    depends_on: [ checkout, pr-merge ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: build-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Compilando frontend…"

  - name: build-frontend
    image: node:18
    when:
      exists: [ frontend/package.json ]
    depends_on: [ checkout, pr-merge, status-build-frontend-pending ]
    commands:
      - cd frontend
      - npm ci
      - npm run build || true

  - name: status-build-frontend-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] }, exists: [ frontend/package.json ] }
    depends_on: [ build-frontend ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: build-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Build frontend OK"

  - name: status-build-frontend-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] }, exists: [ frontend/package.json ] }
    depends_on: [ build-frontend ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: build-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Falló build frontend"

  - name: status-test-frontend-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], exists: [ frontend/package.json ] }
    depends_on: [ build-frontend ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: test-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Ejecutando pruebas frontend…"

  - name: test-frontend
    image: node:18-bullseye
    when:
      exists: [ frontend/package.json ]
    environment:
      CI: "true"
      CHROME_BIN: /usr/bin/chromium
    depends_on: [ status-test-frontend-pending ]
    commands:
      - apt-get update
      - apt-get install -y chromium fonts-liberation libnss3 libasound2 libatk-bridge2.0-0 libgtk-3-0 libgbm1 xvfb
      - cd frontend
      - npm ci --no-audit --no-fund --legacy-peer-deps || {
          echo "Reintentando sin scripts (posible prepare/postinstall problem)";
          npm ci --no-audit --no-fund --legacy-peer-deps --ignore-scripts;
        }
      - npm test -- --watch=false --code-coverage

  - name: status-test-frontend-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] }, exists: [ frontend/package.json ] }
    depends_on: [ test-frontend ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: test-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Tests frontend OK"

  - name: status-test-frontend-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] }, exists: [ frontend/package.json ] }
    depends_on: [ test-frontend ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: test-frontend
      target_url: ${DRONE_BUILD_LINK}
      description: "Fallaron tests frontend"

  # ===== Sonar FRONTEND por rama  =====
  - name: sonar-qgate-frontend-main
    image: sonarsource/sonar-scanner-cli:latest
    when: { event: [ push ], branch: [ main ], exists: [ frontend/package.json] }
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_main
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_main"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Prod \
          -Dsonar.projectName=FP:Frontend_Prod \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-qgate-frontend-development
    image: sonarsource/sonar-scanner-cli:latest
    when: { event: [ push ], branch: [ development ], exists: [ frontend/package.json] }
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_development
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_development"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Development \
          -Dsonar.projectName=FP:Frontend_Development \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-qgate-frontend-qa
    image: sonarsource/sonar-scanner-cli:latest
    when: { event: [ push ], branch: [ qa ], exists: [ frontend/package.json] }
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_qa
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonarqube ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_qa"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Qa \
          -Dsonar.projectName=FP:Frontend_Qa \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  # ===== Sonar FRONTEND PR + status "sonar-frontend/analyze-qa" =====
  - name: status-sonar-frontend-analyze-qa-pending
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], exists: [ frontend/package.json ] }
    depends_on: [ test-frontend, wait-for-sonarqube ]
    settings:
      token:
        from_secret: github_token
      state: pending
      context: sonar-frontend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Analizando frontend (PR) en SonarQube…"
      
  - name: sonar-qgate-frontend-pr
    image: sonarsource/sonar-scanner-cli:latest
    when: { event: [ pull_request ], exists: [ frontend/package.json ] }
    environment:
      SONAR_TOKEN:
        from_secret: sonar-token
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ status-sonar-frontend-analyze-qa-pending ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend (PR)"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_PR-${DRONE_PULL_REQUEST} \
          -Dsonar.projectName=FP:Frontend_PR-${DRONE_PULL_REQUEST} \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: status-sonar-frontend-analyze-qa-success
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ success ] } }
    depends_on: [ sonar-qgate-frontend-pr ]
    settings:
      token:
        from_secret: github_token
      state: success
      context: sonar-frontend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Análisis frontend (PR) OK"

  - name: status-sonar-frontend-analyze-qa-failure
    image: drone-plugins/drone-github-status
    when: { event: [ pull_request ], status: { include: [ failure ] } }
    depends_on: [ sonar-qgate-frontend-pr ]
    settings:
      token:
        from_secret: github_token
      state: failure
      context: sonar-frontend/analyze-qa
      target_url: ${DRONE_BUILD_LINK}
      description: "Falló análisis frontend (PR)"

  
  # ==== Deploy por rama ====
  - name: deploy-dev
    image: docker:27-cli
    when: { event: [ push ], branch: [ development ] }
    depends_on: [ sonar-qgate-frontend-development ]
    volumes: [ { name: docker_sock, path: /var/run/docker.sock } ]
    commands:
      - |
        set -e
        FILE=docker-compose.comp.yml
        PROFILE=dev
        PROJECT=pharmacy-dev
        docker version
        docker compose version || true
        docker network inspect pharmacy-network >/dev/null 2>&1 || docker network create pharmacy-network
        if ! docker ps -a --format '{{.Names}}' | grep -qx oracle-xe-pharmacy; then
          docker compose -f "$FILE" --profile db up -d
        else
          if [ "$(docker inspect -f '{{.State.Running}}' oracle-xe-pharmacy 2>/dev/null || echo false)" != "true" ]; then
            docker start oracle-xe-pharmacy
          fi
        fi
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" down || true
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" up -d --build
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" ps

  - name: deploy-qa
    image: docker:27-cli
    when: { event: [ push ], branch: [ qa ] }
    depends_on: [ sonar-qgate-frontend-qa ]
    volumes: [ { name: docker_sock, path: /var/run/docker.sock } ]
    commands:
      - |
        set -e
        FILE=docker-compose.comp.yml
        PROFILE=qa
        PROJECT=pharmacy-qa
        docker version
        docker compose version || true
        docker network inspect pharmacy-network >/dev/null 2>&1 || docker network create pharmacy-network
        if ! docker ps -a --format '{{.Names}}' | grep -qx oracle-xe-pharmacy; then
          docker compose -f "$FILE" --profile db up -d
        else
          if [ "$(docker inspect -f '{{.State.Running}}' oracle-xe-pharmacy 2>/dev/null || echo false)" != "true" ]; then
            docker start oracle-xe-pharmacy
          fi
        fi
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" down || true
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" up -d --build
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" ps

  - name: deploy-prod
    image: docker:27-cli
    when: { event: [ push ], branch: [ main ] }
    depends_on: [ sonar-qgate-frontend-main ]
    volumes: [ { name: docker_sock, path: /var/run/docker.sock } ]
    commands:
      - |
        set -e
        FILE=docker-compose.comp.yml
        PROFILE=prod
        PROJECT=pharmacy-prod
        docker version
        docker compose version || true
        docker network inspect pharmacy-network >/dev/null 2>&1 || docker network create pharmacy-network
        if ! docker ps -a --format '{{.Names}}' | grep -qx oracle-xe-pharmacy; then
          docker compose -f "$FILE" --profile db up -d
        else
          if [ "$(docker inspect -f '{{.State.Running}}' oracle-xe-pharmacy 2>/dev/null || echo false)" != "true" ]; then
            docker start oracle-xe-pharmacy
          fi
        fi
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" down || true
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" up -d --build
        docker compose -p "$PROJECT" -f "$FILE" --profile "$PROFILE" ps
---

kind: pipeline
type: docker
name: farmacia-notify
depends_on:
  - farmacia-ci
trigger:
  status:
    include: [ success, failure ]

steps:
  - name: notify
    image: plugins/email
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: smtp_user
      password:
        from_secret: smtp_pass
      from: sandovalisabela0524@gmail.com
      recipients:
        - jflores@unis.edu.gt
        - abrilsofia159@gmail.com
      subject: "TEST DRONE"
      headers:
        - "Content-Type: text/html; charset=UTF-8"
      body: |
        <!doctype html>
        <html lang="es">
        <head>
          <meta charset="utf-8">
          <style>
            body{margin:0;font-family:Arial,Helvetica,sans-serif;background:#f6f7fb;color:#111}
            .box{max-width:640px;margin:16px auto;background:#fff;border:1px solid #e5e7eb;border-radius:10px;overflow:hidden}
            .head{padding:14px 18px;background:#0ea5e9;color:#fff;font-weight:700}
            .sub{padding:8px 18px;background:#f0f9ff;color:#0369a1;font-size:12px}
            .content{padding:16px 18px}
            table{width:100%;border-collapse:collapse}
            td{padding:8px 6px;border-bottom:1px solid #f1f5f9;font-size:14px}
            td:first-child{color:#64748b;width:34%}
            .foot{padding:10px 18px;color:#64748b;font-size:12px;background:#fafafa}
            .status{font-weight:700}
          </style>
        </head>
        <body>
          <div class="box">
            <div class="head">Resultado del pipeline</div>
            <div class="sub">Estado: <span class="status">${DRONE_BUILD_STATUS}</span></div>
            <div class="content">
              <table>
                <tr><td>Proyecto</td><td>${DRONE_REPO}</td></tr>
                <tr><td>Rama</td><td>${DRONE_BRANCH}</td></tr>
                <tr><td>Build #</td><td>${DRONE_BUILD_NUMBER}</td></tr>
                <tr><td>Autor</td><td>${DRONE_COMMIT_AUTHOR}</td></tr>
                <tr><td>Commit</td><td>${DRONE_COMMIT_SHA}</td></tr>
              </table>
            </div>
            <div class="foot">Enviado automáticamente por Drone CI</div>
          </div>
        </body>
        </html>
