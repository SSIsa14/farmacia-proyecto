kind: pipeline
type: docker
name: farmacia-ci

workspace:
  base: /drone
  path: src

clone:
  depth: 50

steps:
  - name: checkout
    image: alpine/git
    commands:
      - git fetch --all
      - git reset --hard origin/${DRONE_BRANCH}

  # ===== Backend (build → test) =====
  - name: build-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    environment:
      MAVEN_OPTS: -Dmaven.test.skip=true
    depends_on: [ checkout ]
    commands:
      - cd pharmacy
      - mvn -q -B clean install -DskipTests

  - name: test-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    depends_on: [ build-backend ]
    commands:
      - cd pharmacy
      - mvn -q -B test jacoco:report

  # === Esperar SonarQube (público: /api/system/status) ===
  - name: wait-for-sonar
    image: curlimages/curl:8.9.1
    depends_on: [ test-backend ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url 
    commands:
      - |
        echo "Esperando $SONAR_HOST_URL ..."
        for i in $(seq 1 60); do
          if curl -fsS "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
            echo "SonarQube listo (status=UP)"; exit 0
          fi
          sleep 5
        done
        echo "Timeout esperando SonarQube (status!=UP)"; exit 8

  # ===== Sonar BACKEND por rama =====
  - name: sonar-backend-main
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ main ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_main
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_main"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Prod \
          -Dsonar.projectName=FP:Backend_Prod \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  - name: sonar-backend-development
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ development ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_development
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_development"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Development \
          -Dsonar.projectName=FP:Backend_Development \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  - name: sonar-backend-qa
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ qa ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_backend_qa
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_backend_qa"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Qa \
          -Dsonar.projectName=FP:Backend_Qa \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ===== Frontend (build → test) =====
  - name: build-frontend
    image: node:18
    when:
      exists: [ frontend/package.json ]
    depends_on:
      - sonar-backend-main
      - sonar-backend-development
      - sonar-backend-qa
    commands:
      - cd frontend
      - npm ci
      - npm run build || true

  - name: test-frontend
    image: node:18-bullseye
    when:
      exists: [ frontend/package.json ]
    environment:
      CI: "true"                     # tu karma ya lo usa para singleRun/headless
      CHROME_BIN: /usr/bin/chromium  # para karma-chrome-launcher
    depends_on: [ build-frontend ]
    commands:
      - apt-get update
      - apt-get install -y chromium fonts-liberation libnss3 libasound2 libatk-bridge2.0-0 libgtk-3-0 libgbm1 xvfb
      - cd frontend
      # 1) intenta instalar “normal”, pero relajando peer deps (Angular viejo)
      - npm ci --no-audit --no-fund --legacy-peer-deps || {
          echo "Reintentando sin scripts (posible prepare/postinstall problem)"; 
          npm ci --no-audit --no-fund --legacy-peer-deps --ignore-scripts;
        }
      # 2) corre los tests en Chrome headless sin sandbox y con cobertura
      - npm test -- --watch=false --code-coverage

  # ===== Sonar FRONTEND por rama =====
  - name: sonar-frontend-main
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ main ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_main
      SONAR_USER_HOME: /tmp/sonar         
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_main"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Prod \
          -Dsonar.projectName=FP:Frontend_Prod \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp

  - name: sonar-frontend-development
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ development ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_development
      SONAR_USER_HOME: /tmp/sonar          
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_development"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - mkdir -p .scannerwork && chmod -R 777 .scannerwork || true
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Development \
          -Dsonar.projectName=FP:Frontend_Development  \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp

  - name: sonar-frontend-qa
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ qa ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_HOST_URL:
        from_secret: sonar_host_url
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_qa
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_HOST_URL" || { echo "Falta secreto sonar_host_url"; exit 2; }
      - test -n "$SONAR_TOKEN" || { echo "Falta secreto sonar_token_frontend_qa"; exit 2; }
      - cd frontend
      - mkdir -p .scannerwork && chmod -R 777 .scannerwork || true
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; ls -la coverage || true; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Qa \
          -Dsonar.projectName=FP:Frontend_Qa \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp

  # ===== Notificación =====
  - name: notify
    image: plugins/email
    when:
      status: [ success, failure ]   # envía tanto si pasa como si falla
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: smtp_user       # App Password si usas Gmail con 2FA
      password:
        from_secret: smtp_pass
      from: sandovalisabela0524@gmail.com
      recipients:
        - jflores@unis.edu.gt
        - abrilsofia159@gmail.com
      subject: "TEST"
      headers:
        - "Content-Type: text/html; charset=UTF-8"
      body: |
        <!doctype html>
        <html lang="es">
        <head>
          <meta charset="utf-8">
          <meta name="color-scheme" content="light dark">
          <style>
            body{margin:0;font-family:Arial,Helvetica,sans-serif;background:#0f172a;color:#e5e7eb}
            .wrap{max-width:640px;margin:0 auto;padding:0 16px 32px}
            .hero{background:linear-gradient(135deg,#0ea5e9,#6366f1,#22c55e);padding:20px 24px;border-radius:14px 14px 0 0}
            .hero h1{margin:0;font-size:20px;color:#fff}
            .badge{display:inline-block;margin-top:8px;padding:4px 10px;border-radius:999px;background:#111827;color:#fff;font-weight:700;text-transform:uppercase;letter-spacing:.5px}
            .card{background:#111827;border:1px solid #1f2937;border-radius:0 0 14px 14px;padding:20px 24px}
            .kv{width:100%;border-collapse:collapse;margin:8px 0 0}
            .kv td{padding:10px 6px;border-bottom:1px solid #1f2937;font-size:14px}
            .kv td:first-child{color:#9ca3af;width:36%}
            .cta{margin-top:18px}
            .btn{display:inline-block;background:#22c55e;color:#06110b;text-decoration:none;font-weight:700;padding:10px 14px;border-radius:10px}
            .footer{margin-top:18px;color:#94a3b8;font-size:12px}
          </style>
        </head>
        <body>
          <div class="wrap">
            <div class="hero">
              <h1>Resultado del Pipeline</h1>
              <span class="badge"> ${DRONE_BUILD_STATUS} </span>
            </div>
            <div class="card">
              <table class="kv">
                <tr><td>Proyecto</td><td>${DRONE_REPO}</td></tr>
                <tr><td>Rama</td><td>${DRONE_BRANCH}</td></tr>
                <tr><td>Build #</td><td>${DRONE_BUILD_NUMBER}</td></tr>
                <tr><td>Autor</td><td>${DRONE_COMMIT_AUTHOR}</td></tr>
                <tr><td>Commit</td><td>${DRONE_COMMIT_SHA}</td></tr>
                <tr><td>Estado</td><td><strong>${DRONE_BUILD_STATUS}</strong></td></tr>
              </table>
              <div class="cta">
                <a class="btn" href="${DRONE_BUILD_LINK}" target="_blank" rel="noopener">Ver Build</a>
              </div>
              <div class="footer">
                Enviado automáticamente por Drone CI · ${DRONE_BUILD_FINISHED}
              </div>
            </div>
          </div>
        </body>
        </html>

