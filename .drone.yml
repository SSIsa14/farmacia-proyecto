kind: pipeline
type: docker
name: farmacia-ci

workspace:
  base: /drone
  path: src

# Host Sonar (no sensible). Ajusta si usas otro.
environment:
  SONAR_HOST_URL: http://sonarqube:9000

clone:
  depth: 50

steps:
  - name: checkout
    image: alpine/git
    commands:
      - git fetch --all
      - git reset --hard origin/${DRONE_BRANCH}

  # ===== Backend (build → test) =====
  - name: build-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    environment:
      MAVEN_OPTS: -Dmaven.test.skip=true
    depends_on: [ checkout ]
    commands:
      - cd pharmacy
      - mvn -q -B clean install -DskipTests

  - name: test-backend
    image: maven:3.9.9-eclipse-temurin-17
    when:
      exists: [ pharmacy/pom.xml ]
    depends_on: [ build-backend ]
    commands:
      - cd pharmacy
      - mvn -q -B test jacoco:report

  # === Esperar SonarQube arriba ===
  - name: wait-for-sonar
    image: curlimages/curl:8.9.1
    depends_on: [ test-backend ]
    commands:
      - |
        echo "Esperando $SONAR_HOST_URL ..."
        for i in $(seq 1 60); do
          if curl -fsS "$SONAR_HOST_URL/api/system/status" | grep -q '"status":"UP"'; then
            echo "SonarQube listo (status=UP)"; exit 0
          fi
          sleep 5
        done
        echo "Timeout esperando SonarQube (status!=UP)"; exit 8

  # ===== Sonar BACKEND por rama (QGate nativo) =====
  - name: sonar-backend-main
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ main ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_backend_main
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_main"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Prod \
          -Dsonar.projectName=FP:Backend_Prod \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-backend-development
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ development ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_backend_development
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_development"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Development \
          -Dsonar.projectName=FP:Backend_Development \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-backend-qa
    image: maven:3.9.9-eclipse-temurin-17
    when:
      branch: [ qa ]
      exists: [ pharmacy/pom.xml ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_backend_qa
    depends_on: [ wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_backend_qa"; exit 2; }
      - cd pharmacy
      - |
        mvn -B sonar:sonar \
          -DskipTests \
          -Dsonar.projectKey=FP:Backend_Qa \
          -Dsonar.projectName=FP:Backend_Qa \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  # ===== Frontend (build → test) =====
  - name: build-frontend
    image: node:18
    when:
      exists: [ frontend/package.json ]
    depends_on:
      - sonar-backend-main
      - sonar-backend-development
      - sonar-backend-qa
    commands:
      - cd frontend
      - npm ci
      - npm run build || true

  - name: test-frontend
    image: node:18-bullseye
    when:
      exists: [ frontend/package.json ]
    environment:
      CI: "true"
      CHROME_BIN: /usr/bin/chromium
    depends_on: [ build-frontend ]
    commands:
      - apt-get update
      - apt-get install -y chromium fonts-liberation libnss3 libasound2 libatk-bridge2.0-0 libgtk-3-0 libgbm1 xvfb
      - cd frontend
      - npm ci --no-audit --no-fund --legacy-peer-deps || {
          echo "Reintentando sin scripts (posible prepare/postinstall problem)";
          npm ci --no-audit --no-fund --legacy-peer-deps --ignore-scripts;
        }
      - npm test -- --watch=false --code-coverage

  # ===== Sonar FRONTEND por rama (QGate nativo) =====
  - name: sonar-frontend-main
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ main ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_main
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_main"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Prod \
          -Dsonar.projectName=FP:Frontend_Prod \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-frontend-development
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ development ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_development
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_development"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Development \
          -Dsonar.projectName=FP:Frontend_Development \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

  - name: sonar-frontend-qa
    image: sonarsource/sonar-scanner-cli:latest
    when:
      branch: [ qa ]
      exists: [ frontend/package.json ]
    environment:
      SONAR_TOKEN:
        from_secret: sonar_token_frontend_qa
      SONAR_USER_HOME: /tmp/sonar
    depends_on: [ test-frontend, wait-for-sonar ]
    commands:
      - test -n "$SONAR_TOKEN" || { echo "Falta sonar_token_frontend_qa"; exit 2; }
      - cd frontend
      - test -f coverage/lcov.info || { echo "No existe coverage/lcov.info"; exit 3; }
      - |
        sonar-scanner \
          -Dsonar.projectKey=FP:Frontend_Qa \
          -Dsonar.projectName=FP:Frontend_Qa \
          -Dsonar.sources=. \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.token="$SONAR_TOKEN" \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.working.directory=/tmp/.scannerwork \
          -Djava.io.tmpdir=/tmp \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.qualitygate.timeout=600

---
kind: pipeline
type: docker
name: farmacia-notify
depends_on:
  - farmacia-ci
trigger:
  status:
    include: [ success, failure ]

steps:
  - name: notify
    image: plugins/email
    settings:
      host: smtp.gmail.com
      port: 587
      username:
        from_secret: smtp_user
      password:
        from_secret: smtp_pass
      from: sandovalisabela0524@gmail.com
      recipients:
        - jflores@unis.edu.gt
        - abrilsofia159@gmail.com
      subject: "TEST DRONE"
      headers:
        - "Content-Type: text/html; charset=UTF-8"
      body: |
        <!doctype html>
        <html lang="es">
        <head>
          <meta charset="utf-8">
          <style>
            body{margin:0;font-family:Arial,Helvetica,sans-serif;background:#f6f7fb;color:#111}
            .box{max-width:640px;margin:16px auto;background:#fff;border:1px solid #e5e7eb;border-radius:10px;overflow:hidden}
            .head{padding:14px 18px;background:#0ea5e9;color:#fff;font-weight:700}
            .sub{padding:8px 18px;background:#f0f9ff;color:#0369a1;font-size:12px}
            .content{padding:16px 18px}
            table{width:100%;border-collapse:collapse}
            td{padding:8px 6px;border-bottom:1px solid #f1f5f9;font-size:14px}
            td:first-child{color:#64748b;width:34%}
            .foot{padding:10px 18px;color:#64748b;font-size:12px;background:#fafafa}
            .status{font-weight:700}
          </style>
        </head>
        <body>
          <div class="box">
            <div class="head">Resultado del pipeline</div>
            <div class="sub">Estado: <span class="status">${DRONE_BUILD_STATUS}</span></div>
            <div class="content">
              <table>
                <tr><td>Proyecto</td><td>${DRONE_REPO}</td></tr>
                <tr><td>Rama</td><td>${DRONE_BRANCH}</td></tr>
                <tr><td>Build #</td><td>${DRONE_BUILD_NUMBER}</td></tr>
                <tr><td>Autor</td><td>${DRONE_COMMIT_AUTHOR}</td></tr>
                <tr><td>Commit</td><td>${DRONE_COMMIT_SHA}</td></tr>
              </table>
            </div>
            <div class="foot">Enviado automáticamente por Drone CI</div>
          </div>
        </body>
        </html>
